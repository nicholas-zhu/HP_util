function color_overlay_tool
% COLOR_OVERLAY_TOOL_M Provides interface to provide a colormap image on
% top of a grayscale background

clc;

%  Create and then hide the GUI as it is being constructed.
wwidth = 630;
wheight = 580;

f = figure('Visible','off','Position',[200,200,wwidth,wheight],...
    'Resize','off',...
    'Color',[0 0 0]);

% VARIABLE DECLARATION
b_data = ones(256);
f_data = ones(256);
b_slice = 1;
f_slice = 1;
b_frame = 1;
f_frame = 1;
b_clim_low = 0;
b_clim_high = 1;
f_clim_low = 0;
f_clim_high = 1;
cmap = 0;
cmap_name = 0;
alpha = 0.6;
alphaHandle = 0;


%%%%%%%%%%%%%%%% CONSTRUCT THE COMPONENTS %%%%%%%%%%%%%%%%%%%
%  Construct the components.

% PANELS
b_panel = uipanel('Units','Pixels',...
    'BackgroundColor',[0 0 0],...
    'BorderType','etchedin',...
    'Title','Background',...
    'ForegroundColor',[1 1 1],...
    'Position',[21 161 284 410]);
f_panel = uipanel('Units','Pixels',...
    'BackgroundColor',[0 0 0],...
    'BorderType','etchedin',...
    'Title','Foreground',...
    'ForegroundColor',[1 1 1],...
    'Position',[326 161 284 410]);
o_panel = uipanel('Units','pixels',...
    'BackgroundColor',[0 0 0],...
    'BorderType','etchedin',...
    'Title','Overlay',...
    'ForegroundColor',[1 1 1],...
    'Position',[326 9 284 142]);

% AXES
b_axes = axes('Parent',b_panel,...
    'Units','pixels',...
    'Position',[10 10 256 256],...
    'Units','normalized');
axes_pos = get(b_axes,'Position');
set(b_axes,'Position',[0.04 0.12 axes_pos(3) axes_pos(4)]);
f_axes = axes('Parent',f_panel,...
    'Units','pixels',...
    'Position',[10 10 256 256],...
    'Units','normalized');
set(f_axes,'Position',[0.04 0.12 axes_pos(3) axes_pos(4)]);

% DROP-DOWN
b_var = uicontrol('Parent',b_panel,...
    'Style','popupmenu',...
    'Callback',@b_var_Callback,...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.04 0.87 0.5 0.1]);
f_var = uicontrol('Parent',f_panel,...
    'Style','popupmenu',...
    'Callback',@f_var_Callback,...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.04 0.87 0.5 0.1]);
cmap_selection = uicontrol('Parent',o_panel,...
    'Style','popupmenu',...
    'BackgroundColor',[1 1 1],...
    'Callback',@colormap_selection_Callback,...
    'String',{'jet','jet2','jet3','gray','autumn','bone',...
    'colorcube','cool','copper','flag','hot','hsv','hsv2','hsv3',...
    'hsv4','lines','pink','prism','spring','summer','white','winter','red','green','blue'},...
    'Units','normalized',...
    'Position',[0.4 0.5 0.35 0.2]);

% BUTTONS
b_slice_down = uicontrol('Parent',b_panel,...
    'Style','pushbutton',...
    'Callback',@slice_down_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','<',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.04 0.78 0.22 0.06]);
b_slice_up = uicontrol('Parent',b_panel,...
    'Style','pushbutton',...
    'Callback',@slice_up_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','>',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.04+0.22 0.78 0.22 0.06]);
b_frame_down = uicontrol('Parent',b_panel,...
    'Style','pushbutton',...
    'Callback',@frame_down_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','<',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.5+0.04 0.78 0.22 0.06]);
b_frame_up = uicontrol('Parent',b_panel,...
    'Style','pushbutton',...
    'Callback',@frame_up_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','>',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.5+0.02+0.22 0.78 0.22 0.06]);
f_slice_down = uicontrol('Parent',f_panel,...
    'Style','pushbutton',...
    'Callback',@slice_down_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','<',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.04 0.78 0.22 0.06]);
f_slice_up = uicontrol('Parent',f_panel,...
    'Style','pushbutton',...
    'Callback',@slice_up_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','>',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.04+0.22 0.78 0.22 0.06]);
f_frame_down = uicontrol('Parent',f_panel,...
    'Style','pushbutton',...
    'Callback',@frame_down_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','<',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.5+0.04 0.78 0.22 0.06]);
f_frame_up = uicontrol('Parent',f_panel,...
    'Style','pushbutton',...
    'Callback',@frame_up_Callback,...
    'BackgroundColor',[161/255 188/255 251/255],...
    'String','>',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.5+0.02+0.22 0.78 0.22 0.06]);
produce_overlay = uicontrol('Parent',o_panel,...
    'Style','pushbutton',...
    'Callback',@produce_overlay_Callback,...
    'BackgroundColor',[191/255 246/255 208/255],...
    'String','Produce Color Overlay',...
    'FontSize',14,...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[.10 0.05 0.80 0.45]);

% TEXT
uicontrol('Parent',b_panel,...
    'Style','text',...
    'String','Slice',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.10 0.85 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',b_panel,...
    'Style','text',...
    'String','Frame',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.59 0.85 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',f_panel,...
    'Style','text',...
    'String','Slice',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.10 0.85 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',f_panel,...
    'Style','text',...
    'String','Frame',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.59 0.85 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',b_panel,...
    'Style','text',...
    'String','low',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.02 0.03 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',b_panel,...
    'Style','text',...
    'String','high',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.35 0.03 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',f_panel,...
    'Style','text',...
    'String','low',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.02 0.03 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',f_panel,...
    'Style','text',...
    'String','high',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.35 0.03 0.15 0.04],...
    'HorizontalAlignment','right');
uicontrol('Parent',o_panel,...
    'Style','text',...
    'String','Colormap',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.15 0.55 0.24 0.13],...
    'HorizontalAlignment','left');
uicontrol('Parent',o_panel,...
    'Style','text',...
    'String','Transparency',...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.15 0.75 0.24 0.13],...
    'HorizontalAlignment','left');


% EDIT BOXES
b_slice_edit = uicontrol('Parent',b_panel,...
    'Style','edit',...
    'String','1',...
    'BackgroundColor',[1 1 1],...
    'Callback',@update_slice_edit_Callback,...
    'Units','normalized',...
    'Position',[0.27 0.85 0.15 0.05]);
b_frame_edit = uicontrol('Parent',b_panel,...
    'Style','edit',...
    'String','1',...
    'BackgroundColor',[1 1 1],...
    'Callback',@update_frame_edit_Callback,...
    'Units','normalized',...
    'Position',[0.76 0.85 0.15 0.05]);
f_slice_edit = uicontrol('Parent',f_panel,...
    'Style','edit',...
    'String','1',...
    'BackgroundColor',[1 1 1],...
    'Callback',@update_slice_edit_Callback,...
    'Units','normalized',...
    'Position',[0.27 0.85 0.15 0.05]);
f_frame_edit = uicontrol('Parent',f_panel,...
    'Style','edit',...
    'String','1',...
    'BackgroundColor',[1 1 1],...
    'Callback',@update_frame_edit_Callback,...
    'Units','normalized',...
    'Position',[0.76 0.85 0.15 0.05]);
b_clim_low_edit = uicontrol('Parent',b_panel,...
    'Style','edit',...
    'Callback',@update_clim_Callback,...
    'String','0',...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.20 0.03 0.15 0.05]);
b_clim_high_edit = uicontrol('Parent',b_panel,...
    'Style','edit',...
    'Callback',@update_clim_Callback,...
    'String','1',...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.53 0.03 0.15 0.05]);
f_clim_low_edit = uicontrol('Parent',f_panel,...
    'Style','edit',...
    'Callback',@update_clim_Callback,...
    'String','0',...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.20 0.03 0.15 0.05]);
f_clim_high_edit = uicontrol('Parent',f_panel,...
    'Style','edit',...
    'Callback',@update_clim_Callback,...
    'String','1',...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.53 0.03 0.15 0.05]);
alpha_edit = uicontrol('Parent',o_panel,...
    'Style','edit',...
    'Callback',@update_alpha_Callback,...
    'String','0.6',...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.74 0.77 0.15 0.17]);

% SLIDERS
alpha_slider = uicontrol('Parent',o_panel,...
    'Style','slider',...
    'Callback',@update_alpha_Callback,...
    'BackgroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.4 0.77 0.3 0.17]);

% CHECKBOXES
b_clim_lock = uicontrol('Parent',b_panel,...
    'Style','checkbox',...
    'String','Lock',...
    'Value',0,...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.72 0.03 0.20 0.05]);
f_clim_lock = uicontrol('Parent',f_panel,...
    'Style','checkbox',...
    'String','Lock',...
    'Value',0,...
    'BackgroundColor',[0 0 0],...
    'ForegroundColor',[1 1 1],...
    'Units','normalized',...
    'Position',[0.72 0.03 0.20 0.05]);



hOptionsMenu = uimenu('Parent',f,...
    'HandleVisibility','callback', ...
    'Label','Options');

hEqualScaleMenuitem = uimenu('Parent',hOptionsMenu,...
    'Label','Update Variables',...
    'HandleVisibility','callback', ...
    'Callback', @menu_update_variables_Callback);


%%%%%%%%%%%%%%% INITIALIZE THE GUI %%%%%%%%%%%%%%%%%%%
% Initialize the GUI.

% Assign the GUI a name to appear in the window title.
set(f,'Name','Color Overlay Tool (created by Matt Smith 2011)');
prep_tool( );

% Move the GUI to the center of the screen.
%    movegui(f,'center')
% Make the GUI visible.
set(f,'Visible','on');


%%%%%%%%%%%%%%%%%%%%%%% CALLBACKS %%%%%%%%%%%%%%%%%%%%%%
%  Callbacks for simple_gui. These callbacks automatically
%  have access to component handles and initialized data
%  because they are nested at a lower level.

    function b_var_Callback(source,eventdata)
        contents = get(b_var,'String');
        var_name = contents{get(b_var,'Value')};
        if strcmp(var_name,'variables')
            b_data = mat2gray(phantom(256));
            b_clim_low = 0;
            b_clim_high = 0.6;
            set(b_clim_low_edit,'String',num2str(b_clim_low));
            set(b_clim_high_edit,'String',num2str(b_clim_high));
            set(b_clim_lock,'Value',1);
        else
            b_data = evalin('base',var_name);
            
            if length(size(b_data)) < 2
                disp('Background variable needs to be at least 2D');
            end
            b_slice = str2num(get(b_slice_edit,'String'));
            b_frame = str2num(get(b_frame_edit,'String'));
            
            if size(b_data,3) < b_slice
                set(b_slice_edit,'String','1');
                b_slice = 1;
            end
            if size(b_data,4) < b_frame
                set(b_frame_edit,'String','1');
                b_frame = 1;
            end
            set(b_clim_lock,'Value',0);
            
            b_im = b_data(:,:,b_slice,b_frame);
            b_clim_low = min(min(b_im));
            b_clim_high = max(max(b_im));
            set(b_clim_low_edit,'String',num2str(b_clim_low));
            set(b_clim_high_edit,'String',num2str(b_clim_high));
        end
        update_b_axes( );
    end

    function f_var_Callback(source,eventdata)
        contents = get(f_var,'String');
        var_name = contents{get(f_var,'Value')};
        if strcmp(var_name,'variables')
            f_data = mat2gray(imresize(rgb2gray(imread('ngc6543a.jpg')),[256 256]));
            f_clim_low = 0.2;
            f_clim_high = 0.7;
            set(f_clim_low_edit,'String',num2str(f_clim_low));
            set(f_clim_high_edit,'String',num2str(f_clim_high));
            set(f_clim_lock,'Value',1);
        else
            f_data = evalin('base',var_name);
            if length(size(f_data)) < 2
                disp('Foreground variable needs to be at least 2D');
            end
            f_slice = str2num(get(f_slice_edit,'String'));
            f_frame = str2num(get(f_frame_edit,'String'));
            
            if size(f_data,3) < f_slice
                set(f_slice_edit,'String','1');
                f_slice = 1;
            end
            if size(f_data,4) < f_frame
                set(f_frame_edit,'String','1');
                f_frame = 1;
            end
            set(f_clim_lock,'Value',0);
            
            f_im = f_data(:,:,f_slice,f_frame);
            f_clim_low = min(min(f_im));
            f_clim_high = max(max(f_im));
            set(f_clim_low_edit,'String',num2str(f_clim_low));
            set(f_clim_high_edit,'String',num2str(f_clim_high));
        end

        update_f_axes( );
    end

    function slice_up_Callback(source, eventdata)
              
        if source == b_slice_up
            slice_handle = b_slice_edit;
            num_slices = size(b_data,3);
        elseif source == f_slice_up
            slice_handle = f_slice_edit;
            num_slices = size(f_data,3);
        end
        
        cur_slice = str2num(get(slice_handle,'String'));
        
        if cur_slice + 1 <= num_slices
            set(slice_handle,'String',num2str(cur_slice+1));
        end
        
        if source == b_slice_up
            update_b_axes( );
        elseif source == f_slice_up
            update_f_axes();
        end
    end

    function slice_down_Callback(source, eventdata)
              
        if source == b_slice_down
            slice_handle = b_slice_edit;
        elseif source == f_slice_down
            slice_handle = f_slice_edit;
        end
        
        cur_slice = str2num(get(slice_handle,'String'));
        
        if cur_slice - 1 > 0
            set(slice_handle,'String',num2str(cur_slice-1));
        end
        
        if source == b_slice_down
            update_b_axes( );
        elseif source == f_slice_down
            update_f_axes();
        end
    end

    function frame_up_Callback(source, eventdata)
              
        if source == b_frame_up
            frame_handle = b_frame_edit;
            num_slices = size(b_data,4);
        elseif source == f_frame_up
            frame_handle = f_frame_edit;
            num_slices = size(f_data,4);
        end
        
        cur_frame = str2num(get(frame_handle,'String'));
        
        if cur_frame + 1 <= num_slices
            set(frame_handle,'String',num2str(cur_frame+1));
        end
        
        if source == b_frame_up
            update_b_axes( );
        elseif source == f_frame_up
            update_f_axes();
        end
    end

    function frame_down_Callback(source, eventdata)
              
        if source == b_frame_down
            frame_handle = b_frame_edit;
        elseif source == f_frame_down
            frame_handle = f_frame_edit;
        end
        
        cur_frame = str2num(get(frame_handle,'String'));
        
        if cur_frame - 1 > 0
            set(frame_handle,'String',num2str(cur_frame-1));
        end
        
        if source == b_frame_down
            update_b_axes( );
        elseif source == f_frame_down
            update_f_axes();
        end
    end

    function colormap_selection_Callback(source, eventdata)
        contents = get(source,'String');
        cmap_name = contents{get(source,'Value')};
        cmap = eval(cmap_name);
        update_f_axes( );
    end

    function produce_overlay_Callback(source, eventdata)
        
        b_im = b_data(:,:,b_slice,b_frame);
        f_im = f_data(:,:,f_slice,f_frame);
        b_clim = [b_clim_low b_clim_high];
        f_clim = [f_clim_low f_clim_high];
        
        %[o_im overlay_map] = color_overlay(b_im,f_im,f_clim,b_clim,cmap_name,1);
        
        alpha = str2num(get(alpha_edit,'String'));
        alphaHandle = color_overlay3(b_im,f_im,f_clim,b_clim,cmap_name,alpha);
        
    end


    function update_clim_Callback(source, eventdata)
        
        if source == b_clim_low_edit || source == b_clim_high_edit
            b_clim_low = str2num(get(b_clim_low_edit,'String'));
            b_clim_high = str2num(get(b_clim_high_edit,'String'));
            set(b_clim_lock,'Value',1);
            update_b_axes( );
        elseif source == f_clim_low_edit || source == f_clim_high_edit
            f_clim_low = str2num(get(f_clim_low_edit,'String'));
            f_clim_high = str2num(get(f_clim_high_edit,'String'));
            set(f_clim_lock,'Value',1);
            update_f_axes( );
        end
    end

    function update_slice_edit_Callback(source, eventdata)
        if source == b_slice_edit
            update_b_axes( );
        elseif source == f_slice_edit
            update_f_axes( );
        end
    end

    function update_frame_edit_Callback(source, eventdata)
        if source == b_frame_edit
            update_b_axes( );
        elseif source == f_frame_edit
            update_f_axes( );
        end
    end

    function menu_update_variables_Callback(source, evetdata)
        update_variables( );
    end

    function update_alpha_Callback(source, eventdata)
        
        if source == alpha_edit
            alpha = str2num(get(alpha_edit,'String'));
            set(alpha_slider,'Value',alpha);
        elseif source == alpha_slider
            alpha = get(alpha_slider,'Value');
            set(alpha_edit,'String',num2str(alpha));
        end
        
        if alpha == 0
            alpha = 0.1;
            set(alpha_edit,'String',num2str(alpha));
            set(alpha_slider,'Value',alpha);
        end
        
        if alphaHandle ~= 0 && ishghandle(alphaHandle)
            alphadata = get(alphaHandle,'AlphaData');
            alphadata = (alphadata./max(max(alphadata))).*alpha;
            set(alphaHandle,'AlphaData',alphadata);
        end
    end


%%%%%%%%%%%%%%%%%%%%%%% FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%
%  Functions for color_overlay_tool.

    function prep_tool( )
        
        b_data = mat2gray(phantom(256));
        b_clim_low = 0;
        b_clim_high = 0.6;
        set(b_clim_low_edit,'String',num2str(b_clim_low));
        set(b_clim_high_edit,'String',num2str(b_clim_high));       
        set(b_clim_lock,'Value',1);
        
        f_data = mat2gray(imresize(rgb2gray(imread('ngc6543a.jpg')),[256 256]));     
        f_clim_low = 0.2;
        f_clim_high = 0.7;      
        set(f_clim_low_edit,'String',num2str(f_clim_low));
        set(f_clim_high_edit,'String',num2str(f_clim_high));       
        set(f_clim_lock,'Value',1);
        
        
        set(cmap_selection,'Value',1);
        cmap = jet2;
        cmap_name = 'jet2';
        set(alpha_edit,'String',num2str(alpha));
        set(alpha_slider,'Value',alpha,'SliderStep',[.1 .1]);
        
        update_variables( );
        
        update_b_axes( );
        update_f_axes( );
        
    end

    function update_variables( )
        vars = evalin('base','who');
        if isempty(vars)
            vars = {'variables'};
        else
            vars = [{'variables'};vars];
        end
        set(b_var,'String',vars);
        set(f_var,'String',vars);
    end

    function update_b_axes( )
        
        b_slice = str2num(get(b_slice_edit,'String'));
        b_frame = str2num(get(b_frame_edit,'String'));
        b_ = b_data(:,:,b_slice,b_frame);
        
        if get(b_clim_lock,'Value') ~= 1
            b_clim_low = min(min(b_));
            b_clim_high = max(max(b_));
            set(b_clim_low_edit,'String',num2str(b_clim_low));
            set(b_clim_high_edit,'String',num2str(b_clim_high));
        end
        
        b_ind = mat2gray(b_,double([b_clim_low b_clim_high]));
        b_im(:,:,1) = b_ind;
        b_im(:,:,2) = b_ind;
        b_im(:,:,3) = b_ind;
        

        % display image
        axes(b_axes);
        imagesc(b_im);axis off;colormap(cmap);

    end

    function update_f_axes( )
        
        f_slice = str2num(get(f_slice_edit,'String'));
        f_frame = str2num(get(f_frame_edit,'String'));
        f_im = f_data(:,:,f_slice,f_frame);
        
        if get(f_clim_lock,'Value') ~= 1
            f_clim_low = min(min(f_im));
            f_clim_high = max(max(f_im));
            set(f_clim_low_edit,'String',num2str(f_clim_low));
            set(f_clim_high_edit,'String',num2str(f_clim_high));
        end        
        
        % display image
        axes(f_axes);
        imagesc(f_im,[f_clim_low f_clim_high]);axis off;

        colormap(cmap);
        
    end

    % Novel colormaps
    % 
    % JET2 is the same as jet but with black base
    function J = jet2(m)
        if nargin < 1
            m = size(get(gcf,'colormap'),1);
            J = jet; J(1,:) = [0 0 0];
        end
        J = jet(m); J(1,:) = [0 0 0];
    end

    % JET3 is the same as jet but with white base
    function J = jet3(m)
        if nargin < 1
            m = size(get(gcf,'colormap'),1);
            J = jet; J(1,:) = [1 1 1];
        end
        J = jet(m); J(1,:) = [1 1 1];
    end


    % HSV2    is the same as HSV but with black base
    function map = hsv2(m)
        map =hsv;
        map(1,:) = [0 0 0];
    end

    % HSV3     is the same as HSV but with white base
    function map = hsv3(m)
        map =hsv;
        map(1,:) = [1 1 1];
    end

    % HSV4    a slight modification of hsv (Hue-saturation-value color map)
    function map = hsv4(m)
        if nargin < 1, m = size(get(gcf,'colormap'),1); end
        h = (0:m-1)'/max(m,1);
        if isempty(h)
            map = [];
        else
            map = hsv2rgb([h h ones(m,1)]);
        end
    end

%
    function map = red()
        map = makeColorMap([0 0 0],[.7 0 0],[1 0 0]);
        map(1,:) = [0 0 0];
    end

%
    function map = green()
        map = makeColorMap([0 0 0],[0 .7 0],[0 1 0]);
        map(1,:) = [0 0 0];
    end

%
    function map = blue()
        map = makeColorMap([0 0 0],[0 0 .7],[0 0 1]);
        map(1,:) = [0 0 0];
    end







end
